"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setRouteStatusCode = exports.setRouteHeaders = exports.setHooks = exports.setControllerPrefix = exports.setApiPrefix = exports.getHooks = exports.findRoute = exports.addRouteMeta = exports.addArgumentMeta = void 0;

var _url = _interopRequireDefault(require("../utils/url"));

var _controller = _interopRequireDefault(require("./controller"));

var _hooks = _interopRequireDefault(require("../hooks"));

var _errors = require("../errors");

var _storage = require("./storage");

var _constants = require("./constants");

var findRoute = function findRoute(url, method) {
  var controllers = Array.from(_storage.controllersMeta.values());

  for (var _i = 0, _controllers = controllers; _i < _controllers.length; _i++) {
    var controllerMeta = _controllers[_i];

    if (controllerMeta.isSuitable(url)) {
      return controllerMeta.findRoute(url, method);
    }
  }
};

exports.findRoute = findRoute;

var setControllerPrefix = function setControllerPrefix(Controller, prefix) {
  var meta = _storage.controllersMeta.get(Controller);

  meta.setRegExp(prefix);
};

exports.setControllerPrefix = setControllerPrefix;

var initControllerMeta = function initControllerMeta(Controller) {
  if (!_storage.controllersMeta.has(Controller)) {
    _storage.controllersMeta.set(Controller, new _controller["default"](Controller));
  }
};

var addRouteMeta = function addRouteMeta(Controller, method, urlInstance) {
  initControllerMeta(Controller);

  _storage.controllersMeta.get(Controller).addRoute(method, urlInstance);
};

exports.addRouteMeta = addRouteMeta;

var setRouteStatusCode = function setRouteStatusCode(Controller, method, code) {
  _storage.controllersMeta.get(Controller).getRoute(method).setStatusCode(code);
};

exports.setRouteStatusCode = setRouteStatusCode;

var setRouteHeaders = function setRouteHeaders(Controller, method, headers) {
  _storage.controllersMeta.get(Controller).getRoute(method).setHeaders(headers);
};

exports.setRouteHeaders = setRouteHeaders;

var addArgumentMeta = function addArgumentMeta(Controller, method, _ref) {
  var index = _ref.index,
      type = _ref.type,
      attribute = _ref.attribute;
  initControllerMeta(Controller);

  var controllerMeta = _storage.controllersMeta.get(Controller);

  var methodMeta = controllerMeta.getRoute(method);
  methodMeta.addArgument(type, attribute, index);
};

exports.addArgumentMeta = addArgumentMeta;

var setApiPrefix = function setApiPrefix(prefix) {
  return _storage.appMeta.set(_constants.App.PREFIX, _url["default"].trim(prefix));
};

exports.setApiPrefix = setApiPrefix;

var setHooks = function setHooks(CustomHooks) {
  (0, _errors.internalAssert)(CustomHooks.prototype instanceof _hooks["default"], 'hooks should be subclass of Hooks');

  _storage.appMeta.set(_constants.App.HOOKS, new CustomHooks());
};

exports.setHooks = setHooks;

var getHooks = function getHooks() {
  return _storage.appMeta.get(_constants.App.HOOKS);
};

exports.getHooks = getHooks;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tZXRhL2luZGV4LmpzIl0sIm5hbWVzIjpbImZpbmRSb3V0ZSIsInVybCIsIm1ldGhvZCIsImNvbnRyb2xsZXJzIiwiQXJyYXkiLCJmcm9tIiwiY29udHJvbGxlcnNNZXRhIiwidmFsdWVzIiwiY29udHJvbGxlck1ldGEiLCJpc1N1aXRhYmxlIiwic2V0Q29udHJvbGxlclByZWZpeCIsIkNvbnRyb2xsZXIiLCJwcmVmaXgiLCJtZXRhIiwiZ2V0Iiwic2V0UmVnRXhwIiwiaW5pdENvbnRyb2xsZXJNZXRhIiwiaGFzIiwic2V0IiwiQ29udHJvbGxlck1ldGEiLCJhZGRSb3V0ZU1ldGEiLCJ1cmxJbnN0YW5jZSIsImFkZFJvdXRlIiwic2V0Um91dGVTdGF0dXNDb2RlIiwiY29kZSIsImdldFJvdXRlIiwic2V0U3RhdHVzQ29kZSIsInNldFJvdXRlSGVhZGVycyIsImhlYWRlcnMiLCJzZXRIZWFkZXJzIiwiYWRkQXJndW1lbnRNZXRhIiwiaW5kZXgiLCJ0eXBlIiwiYXR0cmlidXRlIiwibWV0aG9kTWV0YSIsImFkZEFyZ3VtZW50Iiwic2V0QXBpUHJlZml4IiwiYXBwTWV0YSIsIkFwcCIsIlBSRUZJWCIsIlVybCIsInRyaW0iLCJzZXRIb29rcyIsIkN1c3RvbUhvb2tzIiwicHJvdG90eXBlIiwiSG9va3MiLCJIT09LUyIsImdldEhvb2tzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFTyxJQUFNQSxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFDQyxHQUFELEVBQU1DLE1BQU4sRUFBaUI7QUFDeEMsTUFBTUMsV0FBVyxHQUFHQyxLQUFLLENBQUNDLElBQU4sQ0FBV0MseUJBQWdCQyxNQUFoQixFQUFYLENBQXBCOztBQUVBLGtDQUE2QkosV0FBN0Isa0NBQTBDO0FBQXJDLFFBQU1LLGNBQWMsbUJBQXBCOztBQUNILFFBQUlBLGNBQWMsQ0FBQ0MsVUFBZixDQUEwQlIsR0FBMUIsQ0FBSixFQUFvQztBQUNsQyxhQUFPTyxjQUFjLENBQUNSLFNBQWYsQ0FBeUJDLEdBQXpCLEVBQThCQyxNQUE5QixDQUFQO0FBQ0Q7QUFDRjtBQUNGLENBUk07Ozs7QUFVQSxJQUFNUSxtQkFBbUIsR0FBRyxTQUF0QkEsbUJBQXNCLENBQUNDLFVBQUQsRUFBYUMsTUFBYixFQUF3QjtBQUN6RCxNQUFNQyxJQUFJLEdBQUdQLHlCQUFnQlEsR0FBaEIsQ0FBb0JILFVBQXBCLENBQWI7O0FBRUFFLEVBQUFBLElBQUksQ0FBQ0UsU0FBTCxDQUFlSCxNQUFmO0FBQ0QsQ0FKTTs7OztBQU1QLElBQU1JLGtCQUFrQixHQUFHLFNBQXJCQSxrQkFBcUIsQ0FBQUwsVUFBVSxFQUFJO0FBQ3ZDLE1BQUksQ0FBQ0wseUJBQWdCVyxHQUFoQixDQUFvQk4sVUFBcEIsQ0FBTCxFQUFzQztBQUNwQ0wsNkJBQWdCWSxHQUFoQixDQUFvQlAsVUFBcEIsRUFBZ0MsSUFBSVEsc0JBQUosQ0FBbUJSLFVBQW5CLENBQWhDO0FBQ0Q7QUFDRixDQUpEOztBQU1PLElBQU1TLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQUNULFVBQUQsRUFBYVQsTUFBYixFQUFxQm1CLFdBQXJCLEVBQXFDO0FBQy9ETCxFQUFBQSxrQkFBa0IsQ0FBQ0wsVUFBRCxDQUFsQjs7QUFFQUwsMkJBQWdCUSxHQUFoQixDQUFvQkgsVUFBcEIsRUFBZ0NXLFFBQWhDLENBQXlDcEIsTUFBekMsRUFBaURtQixXQUFqRDtBQUNELENBSk07Ozs7QUFNQSxJQUFNRSxrQkFBa0IsR0FBRyxTQUFyQkEsa0JBQXFCLENBQUNaLFVBQUQsRUFBYVQsTUFBYixFQUFxQnNCLElBQXJCLEVBQThCO0FBQzlEbEIsMkJBQWdCUSxHQUFoQixDQUFvQkgsVUFBcEIsRUFBZ0NjLFFBQWhDLENBQXlDdkIsTUFBekMsRUFBaUR3QixhQUFqRCxDQUErREYsSUFBL0Q7QUFDRCxDQUZNOzs7O0FBSUEsSUFBTUcsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUFDaEIsVUFBRCxFQUFhVCxNQUFiLEVBQXFCMEIsT0FBckIsRUFBaUM7QUFDOUR0QiwyQkFBZ0JRLEdBQWhCLENBQW9CSCxVQUFwQixFQUFnQ2MsUUFBaEMsQ0FBeUN2QixNQUF6QyxFQUFpRDJCLFVBQWpELENBQTRERCxPQUE1RDtBQUNELENBRk07Ozs7QUFJQSxJQUFNRSxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLENBQUNuQixVQUFELEVBQWFULE1BQWIsUUFBb0Q7QUFBQSxNQUE3QjZCLEtBQTZCLFFBQTdCQSxLQUE2QjtBQUFBLE1BQXRCQyxJQUFzQixRQUF0QkEsSUFBc0I7QUFBQSxNQUFoQkMsU0FBZ0IsUUFBaEJBLFNBQWdCO0FBQ2pGakIsRUFBQUEsa0JBQWtCLENBQUNMLFVBQUQsQ0FBbEI7O0FBRUEsTUFBTUgsY0FBYyxHQUFHRix5QkFBZ0JRLEdBQWhCLENBQW9CSCxVQUFwQixDQUF2Qjs7QUFDQSxNQUFNdUIsVUFBVSxHQUFHMUIsY0FBYyxDQUFDaUIsUUFBZixDQUF3QnZCLE1BQXhCLENBQW5CO0FBRUFnQyxFQUFBQSxVQUFVLENBQUNDLFdBQVgsQ0FBdUJILElBQXZCLEVBQTZCQyxTQUE3QixFQUF3Q0YsS0FBeEM7QUFDRCxDQVBNOzs7O0FBU0EsSUFBTUssWUFBWSxHQUFHLFNBQWZBLFlBQWUsQ0FBQXhCLE1BQU07QUFBQSxTQUFJeUIsaUJBQVFuQixHQUFSLENBQVlvQixlQUFJQyxNQUFoQixFQUF3QkMsZ0JBQUlDLElBQUosQ0FBUzdCLE1BQVQsQ0FBeEIsQ0FBSjtBQUFBLENBQTNCOzs7O0FBRUEsSUFBTThCLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQUFDLFdBQVcsRUFBSTtBQUNyQyw4QkFBZUEsV0FBVyxDQUFDQyxTQUFaLFlBQWlDQyxpQkFBaEQsRUFDRSxtQ0FERjs7QUFHQVIsbUJBQVFuQixHQUFSLENBQVlvQixlQUFJUSxLQUFoQixFQUF1QixJQUFJSCxXQUFKLEVBQXZCO0FBQ0QsQ0FMTTs7OztBQU9BLElBQU1JLFFBQVEsR0FBRyxTQUFYQSxRQUFXO0FBQUEsU0FBTVYsaUJBQVF2QixHQUFSLENBQVl3QixlQUFJUSxLQUFoQixDQUFOO0FBQUEsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVXJsIGZyb20gJy4uL3V0aWxzL3VybCdcbmltcG9ydCBDb250cm9sbGVyTWV0YSBmcm9tICcuL2NvbnRyb2xsZXInXG5pbXBvcnQgSG9va3MgZnJvbSAnLi4vaG9va3MnXG5pbXBvcnQgeyBpbnRlcm5hbEFzc2VydCB9IGZyb20gJy4uL2Vycm9ycydcbmltcG9ydCB7IGFwcE1ldGEsIGNvbnRyb2xsZXJzTWV0YSB9IGZyb20gJy4vc3RvcmFnZSdcbmltcG9ydCB7IEFwcCB9IGZyb20gJy4vY29uc3RhbnRzJ1xuXG5leHBvcnQgY29uc3QgZmluZFJvdXRlID0gKHVybCwgbWV0aG9kKSA9PiB7XG4gIGNvbnN0IGNvbnRyb2xsZXJzID0gQXJyYXkuZnJvbShjb250cm9sbGVyc01ldGEudmFsdWVzKCkpXG5cbiAgZm9yIChjb25zdCBjb250cm9sbGVyTWV0YSBvZiBjb250cm9sbGVycykge1xuICAgIGlmIChjb250cm9sbGVyTWV0YS5pc1N1aXRhYmxlKHVybCkpIHtcbiAgICAgIHJldHVybiBjb250cm9sbGVyTWV0YS5maW5kUm91dGUodXJsLCBtZXRob2QpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBzZXRDb250cm9sbGVyUHJlZml4ID0gKENvbnRyb2xsZXIsIHByZWZpeCkgPT4ge1xuICBjb25zdCBtZXRhID0gY29udHJvbGxlcnNNZXRhLmdldChDb250cm9sbGVyKVxuXG4gIG1ldGEuc2V0UmVnRXhwKHByZWZpeClcbn1cblxuY29uc3QgaW5pdENvbnRyb2xsZXJNZXRhID0gQ29udHJvbGxlciA9PiB7XG4gIGlmICghY29udHJvbGxlcnNNZXRhLmhhcyhDb250cm9sbGVyKSkge1xuICAgIGNvbnRyb2xsZXJzTWV0YS5zZXQoQ29udHJvbGxlciwgbmV3IENvbnRyb2xsZXJNZXRhKENvbnRyb2xsZXIpKVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBhZGRSb3V0ZU1ldGEgPSAoQ29udHJvbGxlciwgbWV0aG9kLCB1cmxJbnN0YW5jZSkgPT4ge1xuICBpbml0Q29udHJvbGxlck1ldGEoQ29udHJvbGxlcilcblxuICBjb250cm9sbGVyc01ldGEuZ2V0KENvbnRyb2xsZXIpLmFkZFJvdXRlKG1ldGhvZCwgdXJsSW5zdGFuY2UpXG59XG5cbmV4cG9ydCBjb25zdCBzZXRSb3V0ZVN0YXR1c0NvZGUgPSAoQ29udHJvbGxlciwgbWV0aG9kLCBjb2RlKSA9PiB7XG4gIGNvbnRyb2xsZXJzTWV0YS5nZXQoQ29udHJvbGxlcikuZ2V0Um91dGUobWV0aG9kKS5zZXRTdGF0dXNDb2RlKGNvZGUpXG59XG5cbmV4cG9ydCBjb25zdCBzZXRSb3V0ZUhlYWRlcnMgPSAoQ29udHJvbGxlciwgbWV0aG9kLCBoZWFkZXJzKSA9PiB7XG4gIGNvbnRyb2xsZXJzTWV0YS5nZXQoQ29udHJvbGxlcikuZ2V0Um91dGUobWV0aG9kKS5zZXRIZWFkZXJzKGhlYWRlcnMpXG59XG5cbmV4cG9ydCBjb25zdCBhZGRBcmd1bWVudE1ldGEgPSAoQ29udHJvbGxlciwgbWV0aG9kLCB7IGluZGV4LCB0eXBlLCBhdHRyaWJ1dGUgfSkgPT4ge1xuICBpbml0Q29udHJvbGxlck1ldGEoQ29udHJvbGxlcilcblxuICBjb25zdCBjb250cm9sbGVyTWV0YSA9IGNvbnRyb2xsZXJzTWV0YS5nZXQoQ29udHJvbGxlcilcbiAgY29uc3QgbWV0aG9kTWV0YSA9IGNvbnRyb2xsZXJNZXRhLmdldFJvdXRlKG1ldGhvZClcblxuICBtZXRob2RNZXRhLmFkZEFyZ3VtZW50KHR5cGUsIGF0dHJpYnV0ZSwgaW5kZXgpXG59XG5cbmV4cG9ydCBjb25zdCBzZXRBcGlQcmVmaXggPSBwcmVmaXggPT4gYXBwTWV0YS5zZXQoQXBwLlBSRUZJWCwgVXJsLnRyaW0ocHJlZml4KSlcblxuZXhwb3J0IGNvbnN0IHNldEhvb2tzID0gQ3VzdG9tSG9va3MgPT4ge1xuICBpbnRlcm5hbEFzc2VydChDdXN0b21Ib29rcy5wcm90b3R5cGUgaW5zdGFuY2VvZiBIb29rcyxcbiAgICAnaG9va3Mgc2hvdWxkIGJlIHN1YmNsYXNzIG9mIEhvb2tzJylcblxuICBhcHBNZXRhLnNldChBcHAuSE9PS1MsIG5ldyBDdXN0b21Ib29rcygpKVxufVxuXG5leHBvcnQgY29uc3QgZ2V0SG9va3MgPSAoKSA9PiBhcHBNZXRhLmdldChBcHAuSE9PS1MpIl19